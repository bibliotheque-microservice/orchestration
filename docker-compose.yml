services:
  api-emprunts:
    image: ghcr.io/bibliotheque-microservice/bibliotheque-microservice/emprunts:latest
    env_file:
      - emprunts/env/.env
    ports:
      - "${PORT}:${PORT}"
    command: air ./cmd/ -b 0.0.0.0
    depends_on:
      emprunts-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network


  emprunts-db:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_PORT}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./emprunts/migrations/emprunts.sql:/docker-entrypoint-initdb.d/dump.sql
      - postgres-db:/var/lib/postgresql/data
    networks:
      - app_network

  flask_app:
    image: ghcr.io/bibliotheque-microservice/bibliotheque-microservice/livres:latest
    ports:
      - "3000:3000"  # Port pour exposer l'API Flask
    depends_on:
      db:
        condition: service_started 
      rabbitmq:
        condition: service_healthy  
    environment:
      - DB_HOST=mariadb_db
      - DB_USER=username
      - DB_PASSWORD=password
      - DB_NAME=library_db
      - RABBITMQ_URI=amqp://admin:admin@rabbitmq
    networks:
      - app_network

  mariadb_db:
    image: mariadb:10.5
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: username
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: library_db
    ports:
      - "3306:3306"

  api-users:
    container_name: api-utilisateurs
    image: ghcr.io/bibliotheque-microservice/bibliotheque-microservice/utilisateurs:latest
    env_file:
      - ./utilisateur/env/.env 
    environment:
      - FLASK_APP=app.py
      - FLASK_DEBUG=1 
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=name
    ports:
      - "5000:5000"  
    depends_on:
      db:
        condition: service_started 
      rabbitmq:
        condition: service_healthy  
    networks:
      - app_network


  db:
    image: postgres:alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: name
    ports:
      - "5432:5432"
    volumes:
      - ./migrations/dump.sql:/docker-entrypoint-initdb.d/dump.sql
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-log:/var/log/rabbitmq
    networks:
      - app_network


volumes:
  postgres-db:
  rabbitmq-data:
  rabbitmq-log:

networks:
  app_network:
    external: true
